// Modified webpack-components-plugin.js
// Handles both universal-ai and universal-user-data-generator

const fs = require('fs');
const path = require('path');

class ComponentsListPlugin {
    apply(compiler) {
        compiler.hooks.beforeCompile.tap('ComponentsListPlugin', () => {
            // Handle multiple universal blocks
            const universalBlocks = [
                {
                    name: 'universal-ai',
                    componentsDir: path.resolve(__dirname, 'src/blocks/universal-ai/components'),
                    outputFile: path.resolve(__dirname, 'src/blocks/universal-ai/components-index.js')
                },
                {
                    name: 'universal-user-data-generator',
                    componentsDir: path.resolve(__dirname, 'src/blocks/universal-user-data-generator/components'),
                    outputFile: path.resolve(__dirname, 'src/blocks/universal-user-data-generator/components-index.js')
                }
            ];

            universalBlocks.forEach(block => {
                this.generateComponentsIndex(block);
            });
        });
    }

    generateComponentsIndex(blockConfig) {
        const { name, componentsDir, outputFile } = blockConfig;
        
        if (!fs.existsSync(componentsDir)) {
            fs.mkdirSync(componentsDir, { recursive: true });
        }
        
        const components = {};
        
        try {
            const directories = fs.readdirSync(componentsDir, { withFileTypes: true })
                .filter(dirent => dirent.isDirectory())
                .map(dirent => dirent.name);
            
            directories.forEach(componentName => {
                const configPath = path.join(componentsDir, componentName, 'config.json');
                
                if (fs.existsSync(configPath)) {
                    try {
                        const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
                        components[componentName] = config;
                    } catch (error) {
                        console.warn(`Failed to parse config for component ${componentName} in ${name}:`, error.message);
                    }
                }
            });
            
            // Generate the components index file
            const indexContent = `// Auto-generated by webpack - do not edit manually
export const availableComponents = ${JSON.stringify(components, null, 2)};

// Dynamic imports for component files
export const loadComponent = async (componentName) => {
    try {
        const component = await import(\`./components/\${componentName}/component.js\`);
        return component.default;
    } catch (error) {
        console.error(\`Failed to load component \${componentName}:\`, error);
        return null;
    }
};
`;
            
            fs.writeFileSync(outputFile, indexContent);
            console.log(`Generated ${name} components index with ${Object.keys(components).length} components`);
            
        } catch (error) {
            console.error(`Failed to generate components index for ${name}:`, error);
            // Create empty fallback
            fs.writeFileSync(outputFile, `export const availableComponents = {};\nexport const loadComponent = () => null;`);
        }
    }
}

module.exports = ComponentsListPlugin;